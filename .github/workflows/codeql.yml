# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on:
  push:
    branches: [ "master" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "master" ]
  schedule:
    - cron: '43 10 * * 2'

jobs:
  analyze:
    name: Analyze
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners
    # Consider using larger runners for possible analysis time improvements.
    runs-on: [ubuntu-latest]
    # runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    # timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby', 'swift' ]
        # Use only 'java' to analyze code written in Java, Kotlin or both
        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality
    - name: Update apt-get
      run: |
        "sudo apt-get update -y"
        echo "Running get update succeeded!!!"
              
    - name: Install libSSL
      run: "sudo apt-get install libssl-dev -y"
              
    - name: Install openSSL
      uses: ./.github/actions/actionAzVmRunCommand
      with:
          commandName: "installOpenSSL"
          script: "sudo apt install libcurl4-openssl-dev -y"
              
    - name: Install PkgConfig
      uses: ./.github/actions/actionAzVmRunCommand
      with:
          commandName: "installPkgConfig"
          script: "sudo apt-get install pkg-config -y"
              
    - name: Install buildEssential
      uses: ./.github/actions/actionAzVmRunCommand
      with:
          commandName: "installBuildEssential"
          script: "sudo apt install build-essential -y"
              
    - name: Install nlohmann json
      uses: ./.github/actions/actionAzVmRunCommand
      with:
          commandName: "installNlohmannJson"
          script: "sudo apt-get install nlohmann-json3-dev -y"
              
    - name: Install sqlite3
      uses: ./.github/actions/actionAzVmRunCommand
      with:
          commandName: "installSqlite3"
          script: "sudo apt-get install sqlite3 -y"
            
    - name: Install sqlite3 dev
      uses: ./.github/actions/actionAzVmRunCommand
      with:
          commandName: "installSqlite3Dev"
          script: "sudo apt-get install libsqlite3-dev -y"
            
    - name: Install libgtest
      uses: ./.github/actions/actionAzVmRunCommand
      with:
          commandName: "installLibgtest"
          script: "sudo apt-get install libgtest-dev -y"
            
    - name: Install CMake
      uses: ./.github/actions/actionAzVmRunCommand
      with:
          commandName: "installCMake"
          script: "sudo apt-get install cmake -y"
              
    - name: Install Google test
      uses: ./.github/actions/actionAzVmRunCommand
      with:
          commandName: "installGoogleTest"
          script: "cd /usr/src/gtest && sudo cmake CMakeLists.txt && sudo make && cd lib && sudo cp *.a /usr/lib"
              
    - name: Clone Azure DCAP 
      uses: ./.github/actions/actionAzVmRunCommand
      with:
          commandName: "cloneAzureDcap"
          script: "git clone -b $branchName https://github.com/microsoft/Azure-DCAP-Client.git /AzureDCAP"
              
    - name: Update submodule
      uses: ./.github/actions/actionAzVmRunCommand
      with:
          commandName: "updateSubmodule"
          script: "cd /AzureDCAP && git submodule update --init --recursive"
              
    - name: Configure Azure DCAP
      uses: ./.github/actions/actionAzVmRunCommand
      with:
          commandName: "configureAzureDcap"
          script: "cd /AzureDCAP/src/Linux && ./configure"
              
    - name: Make Azure DCAP
      uses: ./.github/actions/actionAzVmRunCommand
      with:
          commandName: "makeAzureDcap"
          script: "cd /AzureDCAP/src/Linux && make"
              
    - name: Make Install Azure DCAP
      uses: ./.github/actions/actionAzVmRunCommand
      with:
          commandName: "makeInstallAzureDcap"
          script: "cd /AzureDCAP/src/Linux && sudo make install"
            
    - name: CMake DCAP tests
      uses: ./.github/actions/actionAzVmRunCommand
      with:
          commandName: "cmakeDcapTests"
          script: "cd /AzureDCAP/src/Linux && cmake CMakeLists.txt"
            
    - name: Make DCAP tests
      uses: ./.github/actions/actionAzVmRunCommand
      with:
          commandName: "makeDcapTests"
          script: "cd /AzureDCAP/src/ && sudo cp sgx_ql_lib_common.h /usr/include/ && cd /AzureDCAP/src/Linux/ext/intel/ && sudo cp * /usr/include/ && cd ../.. && make"
            
    - name: Run DCAP tests
      uses: ./.github/actions/actionAzVmRunCommand
      with:
          commandName: "runDcapTests"
          script: "cd /AzureDCAP/src/Linux && sudo /sbin/ldconfig -v && ./dcap_provider_utests"

# Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
    # If this step fails, then you should remove it and run the build manually (see below)
    # - name: Autobuild
    #   uses: github/codeql-action/autobuild@v2

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.
    # - name: Build
    #   run: |
    #    echo "Run, Build Application using script"
    #    ./.github/windowsScripts/DCAPBuildMain.ps1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"
